
Adjustable_traffic_lights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad8  08002ad8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad8  08002ad8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad8  08002ad8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000070  08002b50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08002b50  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093a8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0b  00000000  00000000  00029441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002af50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d18  00000000  00000000  0002c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9bc  00000000  00000000  00042fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823db  00000000  00000000  0004e9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0d7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  000d0dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a9c 	.word	0x08002a9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002a9c 	.word	0x08002a9c

0800014c <SCH_Add_Task>:

uint8_t  current_index_task = 0;

void SCH_Init(void){}

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8000158:	4b29      	ldr	r3, [pc, #164]	; (8000200 <SCH_Add_Task+0xb4>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	2b27      	cmp	r3, #39	; 0x27
 800015e:	d84a      	bhi.n	80001f6 <SCH_Add_Task+0xaa>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8000160:	4b27      	ldr	r3, [pc, #156]	; (8000200 <SCH_Add_Task+0xb4>)
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	4619      	mov	r1, r3
 8000166:	4a27      	ldr	r2, [pc, #156]	; (8000204 <SCH_Add_Task+0xb8>)
 8000168:	460b      	mov	r3, r1
 800016a:	009b      	lsls	r3, r3, #2
 800016c:	440b      	add	r3, r1
 800016e:	009b      	lsls	r3, r3, #2
 8000170:	4413      	add	r3, r2
 8000172:	68fa      	ldr	r2, [r7, #12]
 8000174:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY / TICK ;
 8000176:	4b22      	ldr	r3, [pc, #136]	; (8000200 <SCH_Add_Task+0xb4>)
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	4618      	mov	r0, r3
 800017c:	68bb      	ldr	r3, [r7, #8]
 800017e:	4a22      	ldr	r2, [pc, #136]	; (8000208 <SCH_Add_Task+0xbc>)
 8000180:	fba2 2303 	umull	r2, r3, r2, r3
 8000184:	08da      	lsrs	r2, r3, #3
 8000186:	491f      	ldr	r1, [pc, #124]	; (8000204 <SCH_Add_Task+0xb8>)
 8000188:	4603      	mov	r3, r0
 800018a:	009b      	lsls	r3, r3, #2
 800018c:	4403      	add	r3, r0
 800018e:	009b      	lsls	r3, r3, #2
 8000190:	440b      	add	r3, r1
 8000192:	3304      	adds	r3, #4
 8000194:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD/ TICK ;
 8000196:	4b1a      	ldr	r3, [pc, #104]	; (8000200 <SCH_Add_Task+0xb4>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	4618      	mov	r0, r3
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4a1a      	ldr	r2, [pc, #104]	; (8000208 <SCH_Add_Task+0xbc>)
 80001a0:	fba2 2303 	umull	r2, r3, r2, r3
 80001a4:	08da      	lsrs	r2, r3, #3
 80001a6:	4917      	ldr	r1, [pc, #92]	; (8000204 <SCH_Add_Task+0xb8>)
 80001a8:	4603      	mov	r3, r0
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	4403      	add	r3, r0
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	440b      	add	r3, r1
 80001b2:	3308      	adds	r3, #8
 80001b4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80001b6:	4b12      	ldr	r3, [pc, #72]	; (8000200 <SCH_Add_Task+0xb4>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	4619      	mov	r1, r3
 80001bc:	4a11      	ldr	r2, [pc, #68]	; (8000204 <SCH_Add_Task+0xb8>)
 80001be:	460b      	mov	r3, r1
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	440b      	add	r3, r1
 80001c4:	009b      	lsls	r3, r3, #2
 80001c6:	4413      	add	r3, r2
 80001c8:	330c      	adds	r3, #12
 80001ca:	2200      	movs	r2, #0
 80001cc:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <SCH_Add_Task+0xb4>)
 80001d0:	781a      	ldrb	r2, [r3, #0]
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <SCH_Add_Task+0xb4>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	4619      	mov	r1, r3
 80001d8:	4610      	mov	r0, r2
 80001da:	4a0a      	ldr	r2, [pc, #40]	; (8000204 <SCH_Add_Task+0xb8>)
 80001dc:	460b      	mov	r3, r1
 80001de:	009b      	lsls	r3, r3, #2
 80001e0:	440b      	add	r3, r1
 80001e2:	009b      	lsls	r3, r3, #2
 80001e4:	4413      	add	r3, r2
 80001e6:	3310      	adds	r3, #16
 80001e8:	6018      	str	r0, [r3, #0]

		current_index_task++;
 80001ea:	4b05      	ldr	r3, [pc, #20]	; (8000200 <SCH_Add_Task+0xb4>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	3301      	adds	r3, #1
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <SCH_Add_Task+0xb4>)
 80001f4:	701a      	strb	r2, [r3, #0]
	}
}
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	2000008c 	.word	0x2000008c
 8000204:	200000b0 	.word	0x200000b0
 8000208:	cccccccd 	.word	0xcccccccd

0800020c <SCH_Update>:


void SCH_Update(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	button_reading();
 8000212:	f000 f949 	bl	80004a8 <button_reading>
	for(int i = 0; i < current_index_task; i++){
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	e048      	b.n	80002ae <SCH_Update+0xa2>
		if(SCH_tasks_G[i].Delay > 0){
 800021c:	4929      	ldr	r1, [pc, #164]	; (80002c4 <SCH_Update+0xb8>)
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	4613      	mov	r3, r2
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	4413      	add	r3, r2
 8000226:	009b      	lsls	r3, r3, #2
 8000228:	440b      	add	r3, r1
 800022a:	3304      	adds	r3, #4
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d013      	beq.n	800025a <SCH_Update+0x4e>
			SCH_tasks_G[i].Delay--;
 8000232:	4924      	ldr	r1, [pc, #144]	; (80002c4 <SCH_Update+0xb8>)
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4613      	mov	r3, r2
 8000238:	009b      	lsls	r3, r3, #2
 800023a:	4413      	add	r3, r2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	440b      	add	r3, r1
 8000240:	3304      	adds	r3, #4
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	1e59      	subs	r1, r3, #1
 8000246:	481f      	ldr	r0, [pc, #124]	; (80002c4 <SCH_Update+0xb8>)
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4613      	mov	r3, r2
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	4413      	add	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4403      	add	r3, r0
 8000254:	3304      	adds	r3, #4
 8000256:	6019      	str	r1, [r3, #0]
 8000258:	e026      	b.n	80002a8 <SCH_Update+0x9c>
		}
		else{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 800025a:	491a      	ldr	r1, [pc, #104]	; (80002c4 <SCH_Update+0xb8>)
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	4613      	mov	r3, r2
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	4413      	add	r3, r2
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	440b      	add	r3, r1
 8000268:	3308      	adds	r3, #8
 800026a:	6819      	ldr	r1, [r3, #0]
 800026c:	4815      	ldr	r0, [pc, #84]	; (80002c4 <SCH_Update+0xb8>)
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	4613      	mov	r3, r2
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	4413      	add	r3, r2
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	4403      	add	r3, r0
 800027a:	3304      	adds	r3, #4
 800027c:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 800027e:	4911      	ldr	r1, [pc, #68]	; (80002c4 <SCH_Update+0xb8>)
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	4613      	mov	r3, r2
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	4413      	add	r3, r2
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	440b      	add	r3, r1
 800028c:	330c      	adds	r3, #12
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	b2d8      	uxtb	r0, r3
 8000294:	490b      	ldr	r1, [pc, #44]	; (80002c4 <SCH_Update+0xb8>)
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	4613      	mov	r3, r2
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4413      	add	r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	440b      	add	r3, r1
 80002a2:	330c      	adds	r3, #12
 80002a4:	4602      	mov	r2, r0
 80002a6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <SCH_Update+0xbc>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4293      	cmp	r3, r2
 80002b8:	dbb0      	blt.n	800021c <SCH_Update+0x10>
		}
	}
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000b0 	.word	0x200000b0
 80002c8:	2000008c 	.word	0x2000008c

080002cc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 80002d2:	2300      	movs	r3, #0
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	e03a      	b.n	800034e <SCH_Dispatch_Tasks+0x82>
		if(SCH_tasks_G[i].RunMe > 0){
 80002d8:	4922      	ldr	r1, [pc, #136]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	330c      	adds	r3, #12
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d02c      	beq.n	8000348 <SCH_Dispatch_Tasks+0x7c>
			SCH_tasks_G[i].RunMe--;
 80002ee:	491d      	ldr	r1, [pc, #116]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	330c      	adds	r3, #12
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	3b01      	subs	r3, #1
 8000302:	b2d8      	uxtb	r0, r3
 8000304:	4917      	ldr	r1, [pc, #92]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	4613      	mov	r3, r2
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	4413      	add	r3, r2
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	440b      	add	r3, r1
 8000312:	330c      	adds	r3, #12
 8000314:	4602      	mov	r2, r0
 8000316:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8000318:	4912      	ldr	r1, [pc, #72]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	4613      	mov	r3, r2
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	4413      	add	r3, r2
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	440b      	add	r3, r1
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4798      	blx	r3
			if(SCH_tasks_G[i].Period == 0){
 800032a:	490e      	ldr	r1, [pc, #56]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	4613      	mov	r3, r2
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	4413      	add	r3, r2
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	440b      	add	r3, r1
 8000338:	3308      	adds	r3, #8
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d103      	bne.n	8000348 <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete(i);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f812 	bl	800036c <SCH_Delete>
	for(int i = 0; i < current_index_task; i++){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3301      	adds	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <SCH_Dispatch_Tasks+0x9c>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	461a      	mov	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4293      	cmp	r3, r2
 8000358:	dbbe      	blt.n	80002d8 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200000b0 	.word	0x200000b0
 8000368:	2000008c 	.word	0x2000008c

0800036c <SCH_Delete>:

void SCH_Delete(uint32_t ID){
 800036c:	b4b0      	push	{r4, r5, r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	if(ID == current_index_task){
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <SCH_Delete+0xa8>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4293      	cmp	r3, r2
 800037e:	d127      	bne.n	80003d0 <SCH_Delete+0x64>
		SCH_tasks_G[ID].pTask = 0x0000;
 8000380:	4925      	ldr	r1, [pc, #148]	; (8000418 <SCH_Delete+0xac>)
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	4613      	mov	r3, r2
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	4413      	add	r3, r2
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	440b      	add	r3, r1
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[ID].Delay = 0;
 8000392:	4921      	ldr	r1, [pc, #132]	; (8000418 <SCH_Delete+0xac>)
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	440b      	add	r3, r1
 80003a0:	3304      	adds	r3, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[ID].Period = 0;
 80003a6:	491c      	ldr	r1, [pc, #112]	; (8000418 <SCH_Delete+0xac>)
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	4613      	mov	r3, r2
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	4413      	add	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	440b      	add	r3, r1
 80003b4:	3308      	adds	r3, #8
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[ID].RunMe = 0;
 80003ba:	4917      	ldr	r1, [pc, #92]	; (8000418 <SCH_Delete+0xac>)
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	330c      	adds	r3, #12
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
 80003ce:	e015      	b.n	80003fc <SCH_Delete+0x90>
	}

	else{
		SCH_tasks_G[ID] = SCH_tasks_G[current_index_task];
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <SCH_Delete+0xa8>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4618      	mov	r0, r3
 80003d6:	4910      	ldr	r1, [pc, #64]	; (8000418 <SCH_Delete+0xac>)
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	4613      	mov	r3, r2
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	4413      	add	r3, r2
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4419      	add	r1, r3
 80003e4:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <SCH_Delete+0xac>)
 80003e6:	4603      	mov	r3, r0
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	4403      	add	r3, r0
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4413      	add	r3, r2
 80003f0:	460c      	mov	r4, r1
 80003f2:	461d      	mov	r5, r3
 80003f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f8:	682b      	ldr	r3, [r5, #0]
 80003fa:	6023      	str	r3, [r4, #0]
	}
	current_index_task--;
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <SCH_Delete+0xa8>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	3b01      	subs	r3, #1
 8000402:	b2da      	uxtb	r2, r3
 8000404:	4b03      	ldr	r3, [pc, #12]	; (8000414 <SCH_Delete+0xa8>)
 8000406:	701a      	strb	r2, [r3, #0]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bcb0      	pop	{r4, r5, r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	2000008c 	.word	0x2000008c
 8000418:	200000b0 	.word	0x200000b0

0800041c <isButton1Pressed>:

int hold_counter[3] = {0, 0, 0};



int isButton1Pressed(){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	if(button1_flag[0] == 1){
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <isButton1Pressed+0x20>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d104      	bne.n	8000432 <isButton1Pressed+0x16>
		button1_flag[0] = 0;
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <isButton1Pressed+0x20>)
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
		return 1;
 800042e:	2301      	movs	r3, #1
 8000430:	e000      	b.n	8000434 <isButton1Pressed+0x18>
	}
	return 0;
 8000432:	2300      	movs	r3, #0
}
 8000434:	4618      	mov	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	20000090 	.word	0x20000090

08000440 <isButton2Pressed>:

int isButton2Pressed(){
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	if(button1_flag[1] == 1){
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <isButton2Pressed+0x20>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d104      	bne.n	8000456 <isButton2Pressed+0x16>
			button1_flag[1] = 0;
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <isButton2Pressed+0x20>)
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
			return 1;
 8000452:	2301      	movs	r3, #1
 8000454:	e000      	b.n	8000458 <isButton2Pressed+0x18>
		}
		return 0;
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	20000090 	.word	0x20000090

08000464 <isButton3Pressed>:

int isButton3Pressed(){
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	if(button1_flag[2] == 1){
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <isButton3Pressed+0x20>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d104      	bne.n	800047a <isButton3Pressed+0x16>
			button1_flag[2] = 0;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <isButton3Pressed+0x20>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
			return 1;
 8000476:	2301      	movs	r3, #1
 8000478:	e000      	b.n	800047c <isButton3Pressed+0x18>
		}
		return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	20000090 	.word	0x20000090

08000488 <isButtonHold>:

int isButtonHold(){
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	if(hold_counter[1] >= 50)
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <isButtonHold+0x1c>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	2b31      	cmp	r3, #49	; 0x31
 8000492:	dd01      	ble.n	8000498 <isButtonHold+0x10>
		return 1;
 8000494:	2301      	movs	r3, #1
 8000496:	e000      	b.n	800049a <isButtonHold+0x12>
	return 0;
 8000498:	2300      	movs	r3, #0
}
 800049a:	4618      	mov	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	2000009c 	.word	0x2000009c

080004a8 <button_reading>:

int timeKeyReg[3] = {200, 200, 200};


void button_reading(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	keyReg0[0] = keyReg1[0];
 80004ae:	4b51      	ldr	r3, [pc, #324]	; (80005f4 <button_reading+0x14c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a51      	ldr	r2, [pc, #324]	; (80005f8 <button_reading+0x150>)
 80004b4:	6013      	str	r3, [r2, #0]
	keyReg1[0] = keyReg2[0];
 80004b6:	4b51      	ldr	r3, [pc, #324]	; (80005fc <button_reading+0x154>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a4e      	ldr	r2, [pc, #312]	; (80005f4 <button_reading+0x14c>)
 80004bc:	6013      	str	r3, [r2, #0]
	keyReg2[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80004be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c2:	484f      	ldr	r0, [pc, #316]	; (8000600 <button_reading+0x158>)
 80004c4:	f001 fad6 	bl	8001a74 <HAL_GPIO_ReadPin>
 80004c8:	4603      	mov	r3, r0
 80004ca:	461a      	mov	r2, r3
 80004cc:	4b4b      	ldr	r3, [pc, #300]	; (80005fc <button_reading+0x154>)
 80004ce:	601a      	str	r2, [r3, #0]
	keyReg0[1] = keyReg1[1];
 80004d0:	4b48      	ldr	r3, [pc, #288]	; (80005f4 <button_reading+0x14c>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	4a48      	ldr	r2, [pc, #288]	; (80005f8 <button_reading+0x150>)
 80004d6:	6053      	str	r3, [r2, #4]
	keyReg1[1] = keyReg2[1];
 80004d8:	4b48      	ldr	r3, [pc, #288]	; (80005fc <button_reading+0x154>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	4a45      	ldr	r2, [pc, #276]	; (80005f4 <button_reading+0x14c>)
 80004de:	6053      	str	r3, [r2, #4]
	keyReg2[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80004e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e4:	4846      	ldr	r0, [pc, #280]	; (8000600 <button_reading+0x158>)
 80004e6:	f001 fac5 	bl	8001a74 <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b43      	ldr	r3, [pc, #268]	; (80005fc <button_reading+0x154>)
 80004f0:	605a      	str	r2, [r3, #4]
	keyReg0[2] = keyReg1[2];
 80004f2:	4b40      	ldr	r3, [pc, #256]	; (80005f4 <button_reading+0x14c>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	4a40      	ldr	r2, [pc, #256]	; (80005f8 <button_reading+0x150>)
 80004f8:	6093      	str	r3, [r2, #8]
	keyReg1[2] = keyReg2[2];
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <button_reading+0x154>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	4a3d      	ldr	r2, [pc, #244]	; (80005f4 <button_reading+0x14c>)
 8000500:	6093      	str	r3, [r2, #8]
	keyReg2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000506:	483e      	ldr	r0, [pc, #248]	; (8000600 <button_reading+0x158>)
 8000508:	f001 fab4 	bl	8001a74 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	461a      	mov	r2, r3
 8000510:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <button_reading+0x154>)
 8000512:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < 3; i++){
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	e064      	b.n	80005e4 <button_reading+0x13c>
		if(keyReg0[i] == keyReg1[i] && keyReg1[i] == keyReg2[i]){
 800051a:	4a37      	ldr	r2, [pc, #220]	; (80005f8 <button_reading+0x150>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000522:	4934      	ldr	r1, [pc, #208]	; (80005f4 <button_reading+0x14c>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800052a:	429a      	cmp	r2, r3
 800052c:	d157      	bne.n	80005de <button_reading+0x136>
 800052e:	4a31      	ldr	r2, [pc, #196]	; (80005f4 <button_reading+0x14c>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000536:	4931      	ldr	r1, [pc, #196]	; (80005fc <button_reading+0x154>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800053e:	429a      	cmp	r2, r3
 8000540:	d14d      	bne.n	80005de <button_reading+0x136>
			if(keyReg3[i] != keyReg2[i]){
 8000542:	4a30      	ldr	r2, [pc, #192]	; (8000604 <button_reading+0x15c>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800054a:	492c      	ldr	r1, [pc, #176]	; (80005fc <button_reading+0x154>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000552:	429a      	cmp	r2, r3
 8000554:	d01d      	beq.n	8000592 <button_reading+0xea>
				keyReg3[i] = keyReg2[i];
 8000556:	4a29      	ldr	r2, [pc, #164]	; (80005fc <button_reading+0x154>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055e:	4929      	ldr	r1, [pc, #164]	; (8000604 <button_reading+0x15c>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(keyReg3[i] == PRESSED_STATE){
 8000566:	4a27      	ldr	r2, [pc, #156]	; (8000604 <button_reading+0x15c>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d135      	bne.n	80005de <button_reading+0x136>
					button1_flag[i] = 1;
 8000572:	4a25      	ldr	r2, [pc, #148]	; (8000608 <button_reading+0x160>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2101      	movs	r1, #1
 8000578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeKeyReg[i] = 200;
 800057c:	4a23      	ldr	r2, [pc, #140]	; (800060c <button_reading+0x164>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	21c8      	movs	r1, #200	; 0xc8
 8000582:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					hold_counter[i] = 0;
 8000586:	4a22      	ldr	r2, [pc, #136]	; (8000610 <button_reading+0x168>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2100      	movs	r1, #0
 800058c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000590:	e025      	b.n	80005de <button_reading+0x136>
				}
			}
			else{
				timeKeyReg[i]--;
 8000592:	4a1e      	ldr	r2, [pc, #120]	; (800060c <button_reading+0x164>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800059a:	1e5a      	subs	r2, r3, #1
 800059c:	491b      	ldr	r1, [pc, #108]	; (800060c <button_reading+0x164>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timeKeyReg[i] == 0){
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <button_reading+0x164>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d104      	bne.n	80005ba <button_reading+0x112>
					keyReg3[i] = NORMAL_STATE;
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <button_reading+0x15c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2101      	movs	r1, #1
 80005b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(i == 1 && keyReg3[i] == PRESSED_STATE){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d10e      	bne.n	80005de <button_reading+0x136>
 80005c0:	4a10      	ldr	r2, [pc, #64]	; (8000604 <button_reading+0x15c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d108      	bne.n	80005de <button_reading+0x136>
					hold_counter[i]++;
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <button_reading+0x168>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	490e      	ldr	r1, [pc, #56]	; (8000610 <button_reading+0x168>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	dd97      	ble.n	800051a <button_reading+0x72>
				}
			}
		}
	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000000c 	.word	0x2000000c
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000018 	.word	0x20000018
 8000600:	40010c00 	.word	0x40010c00
 8000604:	20000024 	.word	0x20000024
 8000608:	20000090 	.word	0x20000090
 800060c:	20000030 	.word	0x20000030
 8000610:	2000009c 	.word	0x2000009c

08000614 <uprateHoldValue>:
//			}
//
//		}
//}

void uprateHoldValue(){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	switch(mode){
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <uprateHoldValue+0x80>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b04      	cmp	r3, #4
 800061e:	d020      	beq.n	8000662 <uprateHoldValue+0x4e>
 8000620:	2b04      	cmp	r3, #4
 8000622:	dc2b      	bgt.n	800067c <uprateHoldValue+0x68>
 8000624:	2b02      	cmp	r3, #2
 8000626:	d002      	beq.n	800062e <uprateHoldValue+0x1a>
 8000628:	2b03      	cmp	r3, #3
 800062a:	d00d      	beq.n	8000648 <uprateHoldValue+0x34>
		case 4:
			green_buffer++;
			if(green_buffer > 99) green_buffer = 0;
			break;
		default:
			break;
 800062c:	e026      	b.n	800067c <uprateHoldValue+0x68>
			red_buffer++;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <uprateHoldValue+0x84>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a18      	ldr	r2, [pc, #96]	; (8000698 <uprateHoldValue+0x84>)
 8000636:	6013      	str	r3, [r2, #0]
			if(red_buffer > 99)	red_buffer = 0;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <uprateHoldValue+0x84>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b63      	cmp	r3, #99	; 0x63
 800063e:	dd1f      	ble.n	8000680 <uprateHoldValue+0x6c>
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <uprateHoldValue+0x84>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
			break;
 8000646:	e01b      	b.n	8000680 <uprateHoldValue+0x6c>
			yellow_buffer++;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <uprateHoldValue+0x88>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a13      	ldr	r2, [pc, #76]	; (800069c <uprateHoldValue+0x88>)
 8000650:	6013      	str	r3, [r2, #0]
			if(yellow_buffer > 99) yellow_buffer = 0;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <uprateHoldValue+0x88>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b63      	cmp	r3, #99	; 0x63
 8000658:	dd14      	ble.n	8000684 <uprateHoldValue+0x70>
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <uprateHoldValue+0x88>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
			break;
 8000660:	e010      	b.n	8000684 <uprateHoldValue+0x70>
			green_buffer++;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <uprateHoldValue+0x8c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <uprateHoldValue+0x8c>)
 800066a:	6013      	str	r3, [r2, #0]
			if(green_buffer > 99) green_buffer = 0;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <uprateHoldValue+0x8c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b63      	cmp	r3, #99	; 0x63
 8000672:	dd09      	ble.n	8000688 <uprateHoldValue+0x74>
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <uprateHoldValue+0x8c>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
			break;
 800067a:	e005      	b.n	8000688 <uprateHoldValue+0x74>
			break;
 800067c:	bf00      	nop
 800067e:	e004      	b.n	800068a <uprateHoldValue+0x76>
			break;
 8000680:	bf00      	nop
 8000682:	e002      	b.n	800068a <uprateHoldValue+0x76>
			break;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <uprateHoldValue+0x76>
			break;
 8000688:	bf00      	nop
	}

}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	2000003c 	.word	0x2000003c
 8000698:	20000044 	.word	0x20000044
 800069c:	2000004c 	.word	0x2000004c
 80006a0:	20000054 	.word	0x20000054

080006a4 <setValue>:

void setValue(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	switch(mode){
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <setValue+0x44>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d010      	beq.n	80006d2 <setValue+0x2e>
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	dc13      	bgt.n	80006dc <setValue+0x38>
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d002      	beq.n	80006be <setValue+0x1a>
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d005      	beq.n	80006c8 <setValue+0x24>
			break;
		case 4:
			green_value = green_buffer;
			break;
		default:
			break;
 80006bc:	e00e      	b.n	80006dc <setValue+0x38>
			red_value = red_buffer;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <setValue+0x48>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <setValue+0x4c>)
 80006c4:	6013      	str	r3, [r2, #0]
			break;
 80006c6:	e00a      	b.n	80006de <setValue+0x3a>
			yellow_value = yellow_buffer;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <setValue+0x50>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <setValue+0x54>)
 80006ce:	6013      	str	r3, [r2, #0]
			break;
 80006d0:	e005      	b.n	80006de <setValue+0x3a>
			green_value = green_buffer;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <setValue+0x58>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <setValue+0x5c>)
 80006d8:	6013      	str	r3, [r2, #0]
			break;
 80006da:	e000      	b.n	80006de <setValue+0x3a>
			break;
 80006dc:	bf00      	nop
	}

}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	2000003c 	.word	0x2000003c
 80006ec:	20000044 	.word	0x20000044
 80006f0:	20000040 	.word	0x20000040
 80006f4:	2000004c 	.word	0x2000004c
 80006f8:	20000048 	.word	0x20000048
 80006fc:	20000054 	.word	0x20000054
 8000700:	20000050 	.word	0x20000050

08000704 <fsm_manual>:

void fsm_manual(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	switch(buttonState[0]){
 8000708:	4b41      	ldr	r3, [pc, #260]	; (8000810 <fsm_manual+0x10c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <fsm_manual+0x12>
 8000710:	2b01      	cmp	r3, #1
 8000712:	d017      	beq.n	8000744 <fsm_manual+0x40>
			if(!isButton1Pressed()){
				buttonState[0] = NORMAL;
			}
			break;
		default:
			break;
 8000714:	e022      	b.n	800075c <fsm_manual+0x58>
			if(isButton1Pressed() == 1){
 8000716:	f7ff fe81 	bl	800041c <isButton1Pressed>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d11a      	bne.n	8000756 <fsm_manual+0x52>
				buttonState[0] = PRESSED;
 8000720:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <fsm_manual+0x10c>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
				mode++;
 8000726:	4b3b      	ldr	r3, [pc, #236]	; (8000814 <fsm_manual+0x110>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	4a39      	ldr	r2, [pc, #228]	; (8000814 <fsm_manual+0x110>)
 800072e:	6013      	str	r3, [r2, #0]
				if(mode > 4){
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <fsm_manual+0x110>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b04      	cmp	r3, #4
 8000736:	dd0e      	ble.n	8000756 <fsm_manual+0x52>
					mode = 1;
 8000738:	4b36      	ldr	r3, [pc, #216]	; (8000814 <fsm_manual+0x110>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
					resetCountValue();
 800073e:	f000 f9fb 	bl	8000b38 <resetCountValue>
			break;
 8000742:	e008      	b.n	8000756 <fsm_manual+0x52>
			if(!isButton1Pressed()){
 8000744:	f7ff fe6a 	bl	800041c <isButton1Pressed>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d105      	bne.n	800075a <fsm_manual+0x56>
				buttonState[0] = NORMAL;
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <fsm_manual+0x10c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
			break;
 8000754:	e001      	b.n	800075a <fsm_manual+0x56>
			break;
 8000756:	bf00      	nop
 8000758:	e000      	b.n	800075c <fsm_manual+0x58>
			break;
 800075a:	bf00      	nop
	}

	switch(buttonState[1]){
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <fsm_manual+0x10c>)
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d024      	beq.n	80007ae <fsm_manual+0xaa>
 8000764:	2b02      	cmp	r3, #2
 8000766:	dc2b      	bgt.n	80007c0 <fsm_manual+0xbc>
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <fsm_manual+0x6e>
 800076c:	2b01      	cmp	r3, #1
 800076e:	d015      	beq.n	800079c <fsm_manual+0x98>
			if(!isButtonHold()){
				buttonState[1] = NORMAL;
			}
			break;
		default:
			break;
 8000770:	e026      	b.n	80007c0 <fsm_manual+0xbc>
			if(isButton2Pressed() == 1){
 8000772:	f7ff fe65 	bl	8000440 <isButton2Pressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d104      	bne.n	8000786 <fsm_manual+0x82>
				buttonState[1] = PRESSED;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <fsm_manual+0x10c>)
 800077e:	2201      	movs	r2, #1
 8000780:	705a      	strb	r2, [r3, #1]
				uprateHoldValue();
 8000782:	f7ff ff47 	bl	8000614 <uprateHoldValue>
			if(isButtonHold()){
 8000786:	f7ff fe7f 	bl	8000488 <isButtonHold>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d019      	beq.n	80007c4 <fsm_manual+0xc0>
				buttonState[1] = HOLD;
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <fsm_manual+0x10c>)
 8000792:	2202      	movs	r2, #2
 8000794:	705a      	strb	r2, [r3, #1]
				uprateHoldValue();
 8000796:	f7ff ff3d 	bl	8000614 <uprateHoldValue>
			break;
 800079a:	e013      	b.n	80007c4 <fsm_manual+0xc0>
			if(!isButton2Pressed()){
 800079c:	f7ff fe50 	bl	8000440 <isButton2Pressed>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d110      	bne.n	80007c8 <fsm_manual+0xc4>
				buttonState[1] = NORMAL;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <fsm_manual+0x10c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	705a      	strb	r2, [r3, #1]
			break;
 80007ac:	e00c      	b.n	80007c8 <fsm_manual+0xc4>
			if(!isButtonHold()){
 80007ae:	f7ff fe6b 	bl	8000488 <isButtonHold>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d109      	bne.n	80007cc <fsm_manual+0xc8>
				buttonState[1] = NORMAL;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <fsm_manual+0x10c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	705a      	strb	r2, [r3, #1]
			break;
 80007be:	e005      	b.n	80007cc <fsm_manual+0xc8>
			break;
 80007c0:	bf00      	nop
 80007c2:	e004      	b.n	80007ce <fsm_manual+0xca>
			break;
 80007c4:	bf00      	nop
 80007c6:	e002      	b.n	80007ce <fsm_manual+0xca>
			break;
 80007c8:	bf00      	nop
 80007ca:	e000      	b.n	80007ce <fsm_manual+0xca>
			break;
 80007cc:	bf00      	nop
	}

	switch(buttonState[2]){
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <fsm_manual+0x10c>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <fsm_manual+0xd8>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d00b      	beq.n	80007f2 <fsm_manual+0xee>
			if(!isButton3Pressed()){
				buttonState[2] = NORMAL;
			}
			break;
		default:
			break;
 80007da:	e016      	b.n	800080a <fsm_manual+0x106>
			if(isButton3Pressed() == 1){
 80007dc:	f7ff fe42 	bl	8000464 <isButton3Pressed>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d10e      	bne.n	8000804 <fsm_manual+0x100>
				buttonState[2] = PRESSED;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <fsm_manual+0x10c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	709a      	strb	r2, [r3, #2]
				setValue();
 80007ec:	f7ff ff5a 	bl	80006a4 <setValue>
			break;
 80007f0:	e008      	b.n	8000804 <fsm_manual+0x100>
			if(!isButton3Pressed()){
 80007f2:	f7ff fe37 	bl	8000464 <isButton3Pressed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d105      	bne.n	8000808 <fsm_manual+0x104>
				buttonState[2] = NORMAL;
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <fsm_manual+0x10c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	709a      	strb	r2, [r3, #2]
			break;
 8000802:	e001      	b.n	8000808 <fsm_manual+0x104>
			break;
 8000804:	bf00      	nop
 8000806:	e000      	b.n	800080a <fsm_manual+0x106>
			break;
 8000808:	bf00      	nop
	}

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000a8 	.word	0x200000a8
 8000814:	2000003c 	.word	0x2000003c

08000818 <display7SEG>:
 *      Author: ADMIN
 */

#include "ledDisplay.h"

void display7SEG(int counter){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b09      	cmp	r3, #9
 8000824:	f200 8180 	bhi.w	8000b28 <display7SEG+0x310>
 8000828:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <display7SEG+0x18>)
 800082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082e:	bf00      	nop
 8000830:	08000859 	.word	0x08000859
 8000834:	080008a1 	.word	0x080008a1
 8000838:	080008e9 	.word	0x080008e9
 800083c:	08000931 	.word	0x08000931
 8000840:	08000979 	.word	0x08000979
 8000844:	080009c1 	.word	0x080009c1
 8000848:	08000a09 	.word	0x08000a09
 800084c:	08000a51 	.word	0x08000a51
 8000850:	08000a99 	.word	0x08000a99
 8000854:	08000ae1 	.word	0x08000ae1
		  switch(counter){
		  	  case 0:
		  		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	48b5      	ldr	r0, [pc, #724]	; (8000b34 <display7SEG+0x31c>)
 800085e:	f001 f920 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	48b3      	ldr	r0, [pc, #716]	; (8000b34 <display7SEG+0x31c>)
 8000868:	f001 f91b 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	48b0      	ldr	r0, [pc, #704]	; (8000b34 <display7SEG+0x31c>)
 8000872:	f001 f916 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	48ae      	ldr	r0, [pc, #696]	; (8000b34 <display7SEG+0x31c>)
 800087c:	f001 f911 	bl	8001aa2 <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2110      	movs	r1, #16
 8000884:	48ab      	ldr	r0, [pc, #684]	; (8000b34 <display7SEG+0x31c>)
 8000886:	f001 f90c 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	48a9      	ldr	r0, [pc, #676]	; (8000b34 <display7SEG+0x31c>)
 8000890:	f001 f907 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	48a6      	ldr	r0, [pc, #664]	; (8000b34 <display7SEG+0x31c>)
 800089a:	f001 f902 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 800089e:	e144      	b.n	8000b2a <display7SEG+0x312>
		  	  case 1:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	48a3      	ldr	r0, [pc, #652]	; (8000b34 <display7SEG+0x31c>)
 80008a6:	f001 f8fc 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	48a1      	ldr	r0, [pc, #644]	; (8000b34 <display7SEG+0x31c>)
 80008b0:	f001 f8f7 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2104      	movs	r1, #4
 80008b8:	489e      	ldr	r0, [pc, #632]	; (8000b34 <display7SEG+0x31c>)
 80008ba:	f001 f8f2 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2108      	movs	r1, #8
 80008c2:	489c      	ldr	r0, [pc, #624]	; (8000b34 <display7SEG+0x31c>)
 80008c4:	f001 f8ed 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2110      	movs	r1, #16
 80008cc:	4899      	ldr	r0, [pc, #612]	; (8000b34 <display7SEG+0x31c>)
 80008ce:	f001 f8e8 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2120      	movs	r1, #32
 80008d6:	4897      	ldr	r0, [pc, #604]	; (8000b34 <display7SEG+0x31c>)
 80008d8:	f001 f8e3 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	4894      	ldr	r0, [pc, #592]	; (8000b34 <display7SEG+0x31c>)
 80008e2:	f001 f8de 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 80008e6:	e120      	b.n	8000b2a <display7SEG+0x312>
		  	  case 2:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	4891      	ldr	r0, [pc, #580]	; (8000b34 <display7SEG+0x31c>)
 80008ee:	f001 f8d8 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	488f      	ldr	r0, [pc, #572]	; (8000b34 <display7SEG+0x31c>)
 80008f8:	f001 f8d3 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2104      	movs	r1, #4
 8000900:	488c      	ldr	r0, [pc, #560]	; (8000b34 <display7SEG+0x31c>)
 8000902:	f001 f8ce 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	488a      	ldr	r0, [pc, #552]	; (8000b34 <display7SEG+0x31c>)
 800090c:	f001 f8c9 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	4887      	ldr	r0, [pc, #540]	; (8000b34 <display7SEG+0x31c>)
 8000916:	f001 f8c4 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2120      	movs	r1, #32
 800091e:	4885      	ldr	r0, [pc, #532]	; (8000b34 <display7SEG+0x31c>)
 8000920:	f001 f8bf 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	4882      	ldr	r0, [pc, #520]	; (8000b34 <display7SEG+0x31c>)
 800092a:	f001 f8ba 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 800092e:	e0fc      	b.n	8000b2a <display7SEG+0x312>
		  	  case 3:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin,RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	487f      	ldr	r0, [pc, #508]	; (8000b34 <display7SEG+0x31c>)
 8000936:	f001 f8b4 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	487d      	ldr	r0, [pc, #500]	; (8000b34 <display7SEG+0x31c>)
 8000940:	f001 f8af 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2104      	movs	r1, #4
 8000948:	487a      	ldr	r0, [pc, #488]	; (8000b34 <display7SEG+0x31c>)
 800094a:	f001 f8aa 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4878      	ldr	r0, [pc, #480]	; (8000b34 <display7SEG+0x31c>)
 8000954:	f001 f8a5 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	4875      	ldr	r0, [pc, #468]	; (8000b34 <display7SEG+0x31c>)
 800095e:	f001 f8a0 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2120      	movs	r1, #32
 8000966:	4873      	ldr	r0, [pc, #460]	; (8000b34 <display7SEG+0x31c>)
 8000968:	f001 f89b 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	4870      	ldr	r0, [pc, #448]	; (8000b34 <display7SEG+0x31c>)
 8000972:	f001 f896 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 8000976:	e0d8      	b.n	8000b2a <display7SEG+0x312>
		  	  case 4:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	486d      	ldr	r0, [pc, #436]	; (8000b34 <display7SEG+0x31c>)
 800097e:	f001 f890 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	486b      	ldr	r0, [pc, #428]	; (8000b34 <display7SEG+0x31c>)
 8000988:	f001 f88b 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2104      	movs	r1, #4
 8000990:	4868      	ldr	r0, [pc, #416]	; (8000b34 <display7SEG+0x31c>)
 8000992:	f001 f886 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000996:	2201      	movs	r2, #1
 8000998:	2108      	movs	r1, #8
 800099a:	4866      	ldr	r0, [pc, #408]	; (8000b34 <display7SEG+0x31c>)
 800099c:	f001 f881 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2110      	movs	r1, #16
 80009a4:	4863      	ldr	r0, [pc, #396]	; (8000b34 <display7SEG+0x31c>)
 80009a6:	f001 f87c 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	4861      	ldr	r0, [pc, #388]	; (8000b34 <display7SEG+0x31c>)
 80009b0:	f001 f877 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	485e      	ldr	r0, [pc, #376]	; (8000b34 <display7SEG+0x31c>)
 80009ba:	f001 f872 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 80009be:	e0b4      	b.n	8000b2a <display7SEG+0x312>
		  	  case 5:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	485b      	ldr	r0, [pc, #364]	; (8000b34 <display7SEG+0x31c>)
 80009c6:	f001 f86c 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2102      	movs	r1, #2
 80009ce:	4859      	ldr	r0, [pc, #356]	; (8000b34 <display7SEG+0x31c>)
 80009d0:	f001 f867 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2104      	movs	r1, #4
 80009d8:	4856      	ldr	r0, [pc, #344]	; (8000b34 <display7SEG+0x31c>)
 80009da:	f001 f862 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	4854      	ldr	r0, [pc, #336]	; (8000b34 <display7SEG+0x31c>)
 80009e4:	f001 f85d 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2110      	movs	r1, #16
 80009ec:	4851      	ldr	r0, [pc, #324]	; (8000b34 <display7SEG+0x31c>)
 80009ee:	f001 f858 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2120      	movs	r1, #32
 80009f6:	484f      	ldr	r0, [pc, #316]	; (8000b34 <display7SEG+0x31c>)
 80009f8:	f001 f853 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	484c      	ldr	r0, [pc, #304]	; (8000b34 <display7SEG+0x31c>)
 8000a02:	f001 f84e 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 8000a06:	e090      	b.n	8000b2a <display7SEG+0x312>
		  	  case 6:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4849      	ldr	r0, [pc, #292]	; (8000b34 <display7SEG+0x31c>)
 8000a0e:	f001 f848 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2102      	movs	r1, #2
 8000a16:	4847      	ldr	r0, [pc, #284]	; (8000b34 <display7SEG+0x31c>)
 8000a18:	f001 f843 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2104      	movs	r1, #4
 8000a20:	4844      	ldr	r0, [pc, #272]	; (8000b34 <display7SEG+0x31c>)
 8000a22:	f001 f83e 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2108      	movs	r1, #8
 8000a2a:	4842      	ldr	r0, [pc, #264]	; (8000b34 <display7SEG+0x31c>)
 8000a2c:	f001 f839 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	483f      	ldr	r0, [pc, #252]	; (8000b34 <display7SEG+0x31c>)
 8000a36:	f001 f834 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	483d      	ldr	r0, [pc, #244]	; (8000b34 <display7SEG+0x31c>)
 8000a40:	f001 f82f 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2140      	movs	r1, #64	; 0x40
 8000a48:	483a      	ldr	r0, [pc, #232]	; (8000b34 <display7SEG+0x31c>)
 8000a4a:	f001 f82a 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 8000a4e:	e06c      	b.n	8000b2a <display7SEG+0x312>
		  	  case 7:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2101      	movs	r1, #1
 8000a54:	4837      	ldr	r0, [pc, #220]	; (8000b34 <display7SEG+0x31c>)
 8000a56:	f001 f824 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4835      	ldr	r0, [pc, #212]	; (8000b34 <display7SEG+0x31c>)
 8000a60:	f001 f81f 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2104      	movs	r1, #4
 8000a68:	4832      	ldr	r0, [pc, #200]	; (8000b34 <display7SEG+0x31c>)
 8000a6a:	f001 f81a 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2108      	movs	r1, #8
 8000a72:	4830      	ldr	r0, [pc, #192]	; (8000b34 <display7SEG+0x31c>)
 8000a74:	f001 f815 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	482d      	ldr	r0, [pc, #180]	; (8000b34 <display7SEG+0x31c>)
 8000a7e:	f001 f810 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2120      	movs	r1, #32
 8000a86:	482b      	ldr	r0, [pc, #172]	; (8000b34 <display7SEG+0x31c>)
 8000a88:	f001 f80b 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	4828      	ldr	r0, [pc, #160]	; (8000b34 <display7SEG+0x31c>)
 8000a92:	f001 f806 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 8000a96:	e048      	b.n	8000b2a <display7SEG+0x312>
		  	  case 8:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4825      	ldr	r0, [pc, #148]	; (8000b34 <display7SEG+0x31c>)
 8000a9e:	f001 f800 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4823      	ldr	r0, [pc, #140]	; (8000b34 <display7SEG+0x31c>)
 8000aa8:	f000 fffb 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2104      	movs	r1, #4
 8000ab0:	4820      	ldr	r0, [pc, #128]	; (8000b34 <display7SEG+0x31c>)
 8000ab2:	f000 fff6 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2108      	movs	r1, #8
 8000aba:	481e      	ldr	r0, [pc, #120]	; (8000b34 <display7SEG+0x31c>)
 8000abc:	f000 fff1 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	481b      	ldr	r0, [pc, #108]	; (8000b34 <display7SEG+0x31c>)
 8000ac6:	f000 ffec 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2120      	movs	r1, #32
 8000ace:	4819      	ldr	r0, [pc, #100]	; (8000b34 <display7SEG+0x31c>)
 8000ad0:	f000 ffe7 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2140      	movs	r1, #64	; 0x40
 8000ad8:	4816      	ldr	r0, [pc, #88]	; (8000b34 <display7SEG+0x31c>)
 8000ada:	f000 ffe2 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 8000ade:	e024      	b.n	8000b2a <display7SEG+0x312>
		  	  case 9:
					HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <display7SEG+0x31c>)
 8000ae6:	f000 ffdc 	bl	8001aa2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2102      	movs	r1, #2
 8000aee:	4811      	ldr	r0, [pc, #68]	; (8000b34 <display7SEG+0x31c>)
 8000af0:	f000 ffd7 	bl	8001aa2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2104      	movs	r1, #4
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <display7SEG+0x31c>)
 8000afa:	f000 ffd2 	bl	8001aa2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2108      	movs	r1, #8
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <display7SEG+0x31c>)
 8000b04:	f000 ffcd 	bl	8001aa2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <display7SEG+0x31c>)
 8000b0e:	f000 ffc8 	bl	8001aa2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2120      	movs	r1, #32
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <display7SEG+0x31c>)
 8000b18:	f000 ffc3 	bl	8001aa2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <display7SEG+0x31c>)
 8000b22:	f000 ffbe 	bl	8001aa2 <HAL_GPIO_WritePin>
		  		  break;
 8000b26:	e000      	b.n	8000b2a <display7SEG+0x312>
		  	  default:
		  		  break;
 8000b28:	bf00      	nop

		  }
	  }
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <resetCountValue>:
enum LedState state2 = GREEN;

int counter = RED_VALUE;
int count2 = GREEN_VALUE;

void resetCountValue(){
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	counter = red_value;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <resetCountValue+0x28>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <resetCountValue+0x2c>)
 8000b42:	6013      	str	r3, [r2, #0]
	count2 = green_value;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <resetCountValue+0x30>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <resetCountValue+0x34>)
 8000b4a:	6013      	str	r3, [r2, #0]
	state2 = GREEN;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <resetCountValue+0x38>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	701a      	strb	r2, [r3, #0]
	state = RED;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <resetCountValue+0x3c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000040 	.word	0x20000040
 8000b64:	2000005c 	.word	0x2000005c
 8000b68:	20000050 	.word	0x20000050
 8000b6c:	20000060 	.word	0x20000060
 8000b70:	20000058 	.word	0x20000058
 8000b74:	200000ab 	.word	0x200000ab

08000b78 <getLed1Value>:





int getLed1Value(){
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
	switch(mode){
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <getLed1Value+0x48>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d816      	bhi.n	8000bb4 <getLed1Value+0x3c>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <getLed1Value+0x14>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000b9d 	.word	0x08000b9d
 8000b90:	08000ba3 	.word	0x08000ba3
 8000b94:	08000ba9 	.word	0x08000ba9
 8000b98:	08000baf 	.word	0x08000baf
		case 1:
			return counter;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <getLed1Value+0x4c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	e00a      	b.n	8000bb8 <getLed1Value+0x40>
			break;
		case 2:
			return red_buffer;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <getLed1Value+0x50>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	e007      	b.n	8000bb8 <getLed1Value+0x40>
			break;
		case 3:
			return yellow_buffer;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <getLed1Value+0x54>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	e004      	b.n	8000bb8 <getLed1Value+0x40>
		case 4:
			return green_buffer;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <getLed1Value+0x58>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	e001      	b.n	8000bb8 <getLed1Value+0x40>
		default:
			break;
 8000bb4:	bf00      	nop
	}
	return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	2000003c 	.word	0x2000003c
 8000bc4:	2000005c 	.word	0x2000005c
 8000bc8:	20000044 	.word	0x20000044
 8000bcc:	2000004c 	.word	0x2000004c
 8000bd0:	20000054 	.word	0x20000054

08000bd4 <getLed2Value>:

int getLed2Value(){
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
	switch(mode){
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <getLed2Value+0x48>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d816      	bhi.n	8000c10 <getLed2Value+0x3c>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <getLed2Value+0x14>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000bf9 	.word	0x08000bf9
 8000bec:	08000bff 	.word	0x08000bff
 8000bf0:	08000c05 	.word	0x08000c05
 8000bf4:	08000c0b 	.word	0x08000c0b
		case 1:
			return count2;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <getLed2Value+0x4c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	e00a      	b.n	8000c14 <getLed2Value+0x40>
			break;
		case 2:
			return red_buffer;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <getLed2Value+0x50>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	e007      	b.n	8000c14 <getLed2Value+0x40>
			break;
		case 3:
			return yellow_buffer;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <getLed2Value+0x54>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	e004      	b.n	8000c14 <getLed2Value+0x40>
		case 4:
			return green_buffer;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <getLed2Value+0x58>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	e001      	b.n	8000c14 <getLed2Value+0x40>
		default:
			break;
 8000c10:	bf00      	nop
	}
	return 0;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	2000003c 	.word	0x2000003c
 8000c20:	20000060 	.word	0x20000060
 8000c24:	20000044 	.word	0x20000044
 8000c28:	2000004c 	.word	0x2000004c
 8000c2c:	20000054 	.word	0x20000054

08000c30 <fsm_automatic>:

void fsm_automatic(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	counter--;
 8000c34:	4ba2      	ldr	r3, [pc, #648]	; (8000ec0 <fsm_automatic+0x290>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	4aa1      	ldr	r2, [pc, #644]	; (8000ec0 <fsm_automatic+0x290>)
 8000c3c:	6013      	str	r3, [r2, #0]
	count2--;
 8000c3e:	4ba1      	ldr	r3, [pc, #644]	; (8000ec4 <fsm_automatic+0x294>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	4a9f      	ldr	r2, [pc, #636]	; (8000ec4 <fsm_automatic+0x294>)
 8000c46:	6013      	str	r3, [r2, #0]
	switch(state){
 8000c48:	4b9f      	ldr	r3, [pc, #636]	; (8000ec8 <fsm_automatic+0x298>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d05d      	beq.n	8000d0c <fsm_automatic+0xdc>
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	f300 8086 	bgt.w	8000d62 <fsm_automatic+0x132>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <fsm_automatic+0x30>
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d02b      	beq.n	8000cb6 <fsm_automatic+0x86>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
			}
			break;
		default:
			break;
 8000c5e:	e080      	b.n	8000d62 <fsm_automatic+0x132>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2120      	movs	r1, #32
 8000c64:	4899      	ldr	r0, [pc, #612]	; (8000ecc <fsm_automatic+0x29c>)
 8000c66:	f000 ff1c 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2140      	movs	r1, #64	; 0x40
 8000c6e:	4897      	ldr	r0, [pc, #604]	; (8000ecc <fsm_automatic+0x29c>)
 8000c70:	f000 ff17 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	4894      	ldr	r0, [pc, #592]	; (8000ecc <fsm_automatic+0x29c>)
 8000c7a:	f000 ff12 	bl	8001aa2 <HAL_GPIO_WritePin>
			if(counter < 0){
 8000c7e:	4b90      	ldr	r3, [pc, #576]	; (8000ec0 <fsm_automatic+0x290>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da6f      	bge.n	8000d66 <fsm_automatic+0x136>
				counter = green_value - 1;
 8000c86:	4b92      	ldr	r3, [pc, #584]	; (8000ed0 <fsm_automatic+0x2a0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a8c      	ldr	r2, [pc, #560]	; (8000ec0 <fsm_automatic+0x290>)
 8000c8e:	6013      	str	r3, [r2, #0]
				state = GREEN;
 8000c90:	4b8d      	ldr	r3, [pc, #564]	; (8000ec8 <fsm_automatic+0x298>)
 8000c92:	2202      	movs	r2, #2
 8000c94:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2120      	movs	r1, #32
 8000c9a:	488c      	ldr	r0, [pc, #560]	; (8000ecc <fsm_automatic+0x29c>)
 8000c9c:	f000 ff01 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2140      	movs	r1, #64	; 0x40
 8000ca4:	4889      	ldr	r0, [pc, #548]	; (8000ecc <fsm_automatic+0x29c>)
 8000ca6:	f000 fefc 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	4887      	ldr	r0, [pc, #540]	; (8000ecc <fsm_automatic+0x29c>)
 8000cb0:	f000 fef7 	bl	8001aa2 <HAL_GPIO_WritePin>
			break;
 8000cb4:	e057      	b.n	8000d66 <fsm_automatic+0x136>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4884      	ldr	r0, [pc, #528]	; (8000ecc <fsm_automatic+0x29c>)
 8000cbc:	f000 fef1 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	4881      	ldr	r0, [pc, #516]	; (8000ecc <fsm_automatic+0x29c>)
 8000cc6:	f000 feec 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	487f      	ldr	r0, [pc, #508]	; (8000ecc <fsm_automatic+0x29c>)
 8000cd0:	f000 fee7 	bl	8001aa2 <HAL_GPIO_WritePin>
			if(counter < 0){
 8000cd4:	4b7a      	ldr	r3, [pc, #488]	; (8000ec0 <fsm_automatic+0x290>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	da46      	bge.n	8000d6a <fsm_automatic+0x13a>
				counter = red_value - 1;
 8000cdc:	4b7d      	ldr	r3, [pc, #500]	; (8000ed4 <fsm_automatic+0x2a4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	4a77      	ldr	r2, [pc, #476]	; (8000ec0 <fsm_automatic+0x290>)
 8000ce4:	6013      	str	r3, [r2, #0]
				state = RED;
 8000ce6:	4b78      	ldr	r3, [pc, #480]	; (8000ec8 <fsm_automatic+0x298>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2120      	movs	r1, #32
 8000cf0:	4876      	ldr	r0, [pc, #472]	; (8000ecc <fsm_automatic+0x29c>)
 8000cf2:	f000 fed6 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	4874      	ldr	r0, [pc, #464]	; (8000ecc <fsm_automatic+0x29c>)
 8000cfc:	f000 fed1 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	4871      	ldr	r0, [pc, #452]	; (8000ecc <fsm_automatic+0x29c>)
 8000d06:	f000 fecc 	bl	8001aa2 <HAL_GPIO_WritePin>
			break;
 8000d0a:	e02e      	b.n	8000d6a <fsm_automatic+0x13a>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2120      	movs	r1, #32
 8000d10:	486e      	ldr	r0, [pc, #440]	; (8000ecc <fsm_automatic+0x29c>)
 8000d12:	f000 fec6 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2140      	movs	r1, #64	; 0x40
 8000d1a:	486c      	ldr	r0, [pc, #432]	; (8000ecc <fsm_automatic+0x29c>)
 8000d1c:	f000 fec1 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	4869      	ldr	r0, [pc, #420]	; (8000ecc <fsm_automatic+0x29c>)
 8000d26:	f000 febc 	bl	8001aa2 <HAL_GPIO_WritePin>
			if(counter < 0){
 8000d2a:	4b65      	ldr	r3, [pc, #404]	; (8000ec0 <fsm_automatic+0x290>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da1d      	bge.n	8000d6e <fsm_automatic+0x13e>
				counter = yellow_value - 1;
 8000d32:	4b69      	ldr	r3, [pc, #420]	; (8000ed8 <fsm_automatic+0x2a8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	4a61      	ldr	r2, [pc, #388]	; (8000ec0 <fsm_automatic+0x290>)
 8000d3a:	6013      	str	r3, [r2, #0]
				state = YELLOW;
 8000d3c:	4b62      	ldr	r3, [pc, #392]	; (8000ec8 <fsm_automatic+0x298>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2120      	movs	r1, #32
 8000d46:	4861      	ldr	r0, [pc, #388]	; (8000ecc <fsm_automatic+0x29c>)
 8000d48:	f000 feab 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	485e      	ldr	r0, [pc, #376]	; (8000ecc <fsm_automatic+0x29c>)
 8000d52:	f000 fea6 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	485c      	ldr	r0, [pc, #368]	; (8000ecc <fsm_automatic+0x29c>)
 8000d5c:	f000 fea1 	bl	8001aa2 <HAL_GPIO_WritePin>
			break;
 8000d60:	e005      	b.n	8000d6e <fsm_automatic+0x13e>
			break;
 8000d62:	bf00      	nop
 8000d64:	e004      	b.n	8000d70 <fsm_automatic+0x140>
			break;
 8000d66:	bf00      	nop
 8000d68:	e002      	b.n	8000d70 <fsm_automatic+0x140>
			break;
 8000d6a:	bf00      	nop
 8000d6c:	e000      	b.n	8000d70 <fsm_automatic+0x140>
			break;
 8000d6e:	bf00      	nop
	}

	switch(state2){
 8000d70:	4b5a      	ldr	r3, [pc, #360]	; (8000edc <fsm_automatic+0x2ac>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d069      	beq.n	8000e4c <fsm_automatic+0x21c>
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	f300 8098 	bgt.w	8000eae <fsm_automatic+0x27e>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <fsm_automatic+0x158>
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d031      	beq.n	8000dea <fsm_automatic+0x1ba>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
			}
			break;
		default:
			break;
 8000d86:	e092      	b.n	8000eae <fsm_automatic+0x27e>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8e:	484f      	ldr	r0, [pc, #316]	; (8000ecc <fsm_automatic+0x29c>)
 8000d90:	f000 fe87 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d9a:	484c      	ldr	r0, [pc, #304]	; (8000ecc <fsm_automatic+0x29c>)
 8000d9c:	f000 fe81 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da6:	4849      	ldr	r0, [pc, #292]	; (8000ecc <fsm_automatic+0x29c>)
 8000da8:	f000 fe7b 	bl	8001aa2 <HAL_GPIO_WritePin>
			if(count2 < 0){
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <fsm_automatic+0x294>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	da7e      	bge.n	8000eb2 <fsm_automatic+0x282>
				count2 = green_value - 1;
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <fsm_automatic+0x2a0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	4a42      	ldr	r2, [pc, #264]	; (8000ec4 <fsm_automatic+0x294>)
 8000dbc:	6013      	str	r3, [r2, #0]
				state2 = GREEN;
 8000dbe:	4b47      	ldr	r3, [pc, #284]	; (8000edc <fsm_automatic+0x2ac>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dca:	4840      	ldr	r0, [pc, #256]	; (8000ecc <fsm_automatic+0x29c>)
 8000dcc:	f000 fe69 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd6:	483d      	ldr	r0, [pc, #244]	; (8000ecc <fsm_automatic+0x29c>)
 8000dd8:	f000 fe63 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de2:	483a      	ldr	r0, [pc, #232]	; (8000ecc <fsm_automatic+0x29c>)
 8000de4:	f000 fe5d 	bl	8001aa2 <HAL_GPIO_WritePin>
			break;
 8000de8:	e063      	b.n	8000eb2 <fsm_automatic+0x282>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df0:	4836      	ldr	r0, [pc, #216]	; (8000ecc <fsm_automatic+0x29c>)
 8000df2:	f000 fe56 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfc:	4833      	ldr	r0, [pc, #204]	; (8000ecc <fsm_automatic+0x29c>)
 8000dfe:	f000 fe50 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e08:	4830      	ldr	r0, [pc, #192]	; (8000ecc <fsm_automatic+0x29c>)
 8000e0a:	f000 fe4a 	bl	8001aa2 <HAL_GPIO_WritePin>
			if(count2 < 0){
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <fsm_automatic+0x294>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da4f      	bge.n	8000eb6 <fsm_automatic+0x286>
				count2 = red_value - 1;
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <fsm_automatic+0x2a4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	4a29      	ldr	r2, [pc, #164]	; (8000ec4 <fsm_automatic+0x294>)
 8000e1e:	6013      	str	r3, [r2, #0]
				state2 = RED;
 8000e20:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <fsm_automatic+0x2ac>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2c:	4827      	ldr	r0, [pc, #156]	; (8000ecc <fsm_automatic+0x29c>)
 8000e2e:	f000 fe38 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e38:	4824      	ldr	r0, [pc, #144]	; (8000ecc <fsm_automatic+0x29c>)
 8000e3a:	f000 fe32 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e44:	4821      	ldr	r0, [pc, #132]	; (8000ecc <fsm_automatic+0x29c>)
 8000e46:	f000 fe2c 	bl	8001aa2 <HAL_GPIO_WritePin>
			break;
 8000e4a:	e034      	b.n	8000eb6 <fsm_automatic+0x286>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e52:	481e      	ldr	r0, [pc, #120]	; (8000ecc <fsm_automatic+0x29c>)
 8000e54:	f000 fe25 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5e:	481b      	ldr	r0, [pc, #108]	; (8000ecc <fsm_automatic+0x29c>)
 8000e60:	f000 fe1f 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6a:	4818      	ldr	r0, [pc, #96]	; (8000ecc <fsm_automatic+0x29c>)
 8000e6c:	f000 fe19 	bl	8001aa2 <HAL_GPIO_WritePin>
			if(count2 < 0){
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <fsm_automatic+0x294>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da20      	bge.n	8000eba <fsm_automatic+0x28a>
				count2 = yellow_value - 1;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <fsm_automatic+0x2a8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <fsm_automatic+0x294>)
 8000e80:	6013      	str	r3, [r2, #0]
				state2 = YELLOW;
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <fsm_automatic+0x2ac>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	480f      	ldr	r0, [pc, #60]	; (8000ecc <fsm_automatic+0x29c>)
 8000e90:	f000 fe07 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <fsm_automatic+0x29c>)
 8000e9c:	f000 fe01 	bl	8001aa2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea6:	4809      	ldr	r0, [pc, #36]	; (8000ecc <fsm_automatic+0x29c>)
 8000ea8:	f000 fdfb 	bl	8001aa2 <HAL_GPIO_WritePin>
			break;
 8000eac:	e005      	b.n	8000eba <fsm_automatic+0x28a>
			break;
 8000eae:	bf00      	nop
 8000eb0:	e004      	b.n	8000ebc <fsm_automatic+0x28c>
			break;
 8000eb2:	bf00      	nop
 8000eb4:	e002      	b.n	8000ebc <fsm_automatic+0x28c>
			break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <fsm_automatic+0x28c>
			break;
 8000eba:	bf00      	nop
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000005c 	.word	0x2000005c
 8000ec4:	20000060 	.word	0x20000060
 8000ec8:	200000ab 	.word	0x200000ab
 8000ecc:	40010800 	.word	0x40010800
 8000ed0:	20000050 	.word	0x20000050
 8000ed4:	20000040 	.word	0x20000040
 8000ed8:	20000048 	.word	0x20000048
 8000edc:	20000058 	.word	0x20000058

08000ee0 <fsm_settings>:
//		default:
//			break;
//	}
//}

void fsm_settings(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	static int scan = 0;
	switch(scan){
 8000ee4:	4b7e      	ldr	r3, [pc, #504]	; (80010e0 <fsm_settings+0x200>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	f200 80f6 	bhi.w	80010da <fsm_settings+0x1fa>
 8000eee:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <fsm_settings+0x14>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f09 	.word	0x08000f09
 8000ef8:	08000f65 	.word	0x08000f65
 8000efc:	08000fcb 	.word	0x08000fcb
 8000f00:	08001027 	.word	0x08001027
 8000f04:	0800108d 	.word	0x0800108d
		case 0:
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	4875      	ldr	r0, [pc, #468]	; (80010e4 <fsm_settings+0x204>)
 8000f10:	f000 fdc7 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1a:	4872      	ldr	r0, [pc, #456]	; (80010e4 <fsm_settings+0x204>)
 8000f1c:	f000 fdc1 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	486f      	ldr	r0, [pc, #444]	; (80010e4 <fsm_settings+0x204>)
 8000f28:	f000 fdbb 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN2_Pin, RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f32:	486c      	ldr	r0, [pc, #432]	; (80010e4 <fsm_settings+0x204>)
 8000f34:	f000 fdb5 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3e:	4869      	ldr	r0, [pc, #420]	; (80010e4 <fsm_settings+0x204>)
 8000f40:	f000 fdaf 	bl	8001aa2 <HAL_GPIO_WritePin>
			display7SEG(getLed1Value() / 10);
 8000f44:	f7ff fe18 	bl	8000b78 <getLed1Value>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a67      	ldr	r2, [pc, #412]	; (80010e8 <fsm_settings+0x208>)
 8000f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f50:	1092      	asrs	r2, r2, #2
 8000f52:	17db      	asrs	r3, r3, #31
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fc5e 	bl	8000818 <display7SEG>
			scan = 1;
 8000f5c:	4b60      	ldr	r3, [pc, #384]	; (80010e0 <fsm_settings+0x200>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
			break;
 8000f62:	e0bb      	b.n	80010dc <fsm_settings+0x1fc>
		case 1:
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6a:	485e      	ldr	r0, [pc, #376]	; (80010e4 <fsm_settings+0x204>)
 8000f6c:	f000 fd99 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f76:	485b      	ldr	r0, [pc, #364]	; (80010e4 <fsm_settings+0x204>)
 8000f78:	f000 fd93 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	4858      	ldr	r0, [pc, #352]	; (80010e4 <fsm_settings+0x204>)
 8000f84:	f000 fd8d 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN2_Pin, RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	4855      	ldr	r0, [pc, #340]	; (80010e4 <fsm_settings+0x204>)
 8000f90:	f000 fd87 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9a:	4852      	ldr	r0, [pc, #328]	; (80010e4 <fsm_settings+0x204>)
 8000f9c:	f000 fd81 	bl	8001aa2 <HAL_GPIO_WritePin>
			display7SEG(getLed1Value() % 10);
 8000fa0:	f7ff fdea 	bl	8000b78 <getLed1Value>
 8000fa4:	4601      	mov	r1, r0
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <fsm_settings+0x208>)
 8000fa8:	fb83 2301 	smull	r2, r3, r3, r1
 8000fac:	109a      	asrs	r2, r3, #2
 8000fae:	17cb      	asrs	r3, r1, #31
 8000fb0:	1ad2      	subs	r2, r2, r3
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	1aca      	subs	r2, r1, r3
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	f7ff fc2b 	bl	8000818 <display7SEG>
			scan = 2;
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <fsm_settings+0x200>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	601a      	str	r2, [r3, #0]
			break;
 8000fc8:	e088      	b.n	80010dc <fsm_settings+0x1fc>
		case 2:
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd0:	4844      	ldr	r0, [pc, #272]	; (80010e4 <fsm_settings+0x204>)
 8000fd2:	f000 fd66 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fdc:	4841      	ldr	r0, [pc, #260]	; (80010e4 <fsm_settings+0x204>)
 8000fde:	f000 fd60 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe8:	483e      	ldr	r0, [pc, #248]	; (80010e4 <fsm_settings+0x204>)
 8000fea:	f000 fd5a 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN2_Pin, SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff4:	483b      	ldr	r0, [pc, #236]	; (80010e4 <fsm_settings+0x204>)
 8000ff6:	f000 fd54 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001000:	4838      	ldr	r0, [pc, #224]	; (80010e4 <fsm_settings+0x204>)
 8001002:	f000 fd4e 	bl	8001aa2 <HAL_GPIO_WritePin>
			display7SEG(getLed2Value() / 10);
 8001006:	f7ff fde5 	bl	8000bd4 <getLed2Value>
 800100a:	4603      	mov	r3, r0
 800100c:	4a36      	ldr	r2, [pc, #216]	; (80010e8 <fsm_settings+0x208>)
 800100e:	fb82 1203 	smull	r1, r2, r2, r3
 8001012:	1092      	asrs	r2, r2, #2
 8001014:	17db      	asrs	r3, r3, #31
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fbfd 	bl	8000818 <display7SEG>
			scan = 3;
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <fsm_settings+0x200>)
 8001020:	2203      	movs	r2, #3
 8001022:	601a      	str	r2, [r3, #0]
			break;
 8001024:	e05a      	b.n	80010dc <fsm_settings+0x1fc>
		case 3:
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102c:	482d      	ldr	r0, [pc, #180]	; (80010e4 <fsm_settings+0x204>)
 800102e:	f000 fd38 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	482a      	ldr	r0, [pc, #168]	; (80010e4 <fsm_settings+0x204>)
 800103a:	f000 fd32 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <fsm_settings+0x204>)
 8001046:	f000 fd2c 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN2_Pin, RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001050:	4824      	ldr	r0, [pc, #144]	; (80010e4 <fsm_settings+0x204>)
 8001052:	f000 fd26 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105c:	4821      	ldr	r0, [pc, #132]	; (80010e4 <fsm_settings+0x204>)
 800105e:	f000 fd20 	bl	8001aa2 <HAL_GPIO_WritePin>
			display7SEG(getLed2Value() % 10);
 8001062:	f7ff fdb7 	bl	8000bd4 <getLed2Value>
 8001066:	4601      	mov	r1, r0
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <fsm_settings+0x208>)
 800106a:	fb83 2301 	smull	r2, r3, r3, r1
 800106e:	109a      	asrs	r2, r3, #2
 8001070:	17cb      	asrs	r3, r1, #31
 8001072:	1ad2      	subs	r2, r2, r3
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	1aca      	subs	r2, r1, r3
 800107e:	4610      	mov	r0, r2
 8001080:	f7ff fbca 	bl	8000818 <display7SEG>
			scan = 4;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <fsm_settings+0x200>)
 8001086:	2204      	movs	r2, #4
 8001088:	601a      	str	r2, [r3, #0]
			break;
 800108a:	e027      	b.n	80010dc <fsm_settings+0x1fc>

		case 4:
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <fsm_settings+0x204>)
 8001094:	f000 fd05 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	4811      	ldr	r0, [pc, #68]	; (80010e4 <fsm_settings+0x204>)
 80010a0:	f000 fcff 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <fsm_settings+0x204>)
 80010ac:	f000 fcf9 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN2_Pin, RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <fsm_settings+0x204>)
 80010b8:	f000 fcf3 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <fsm_settings+0x204>)
 80010c4:	f000 fced 	bl	8001aa2 <HAL_GPIO_WritePin>
			display7SEG(mode);
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <fsm_settings+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fba3 	bl	8000818 <display7SEG>
			scan = 0;
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <fsm_settings+0x200>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
			break;
 80010d8:	e000      	b.n	80010dc <fsm_settings+0x1fc>
		default:
			break;
 80010da:	bf00      	nop
	}
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000ac 	.word	0x200000ac
 80010e4:	40010800 	.word	0x40010800
 80010e8:	66666667 	.word	0x66666667
 80010ec:	2000003c 	.word	0x2000003c

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f000 f9d4 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f822 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f000 f8a8 	bl	8001250 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001100:	f000 f85a 	bl	80011b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <main+0x40>)
 8001106:	f001 f911 	bl	800232c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setTimer0(1);
//  setTimer1(1);

  SCH_Add_Task(fsm_settings, 1, 10);
 800110a:	220a      	movs	r2, #10
 800110c:	2101      	movs	r1, #1
 800110e:	4809      	ldr	r0, [pc, #36]	; (8001134 <main+0x44>)
 8001110:	f7ff f81c 	bl	800014c <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 0, 50);
 8001114:	2232      	movs	r2, #50	; 0x32
 8001116:	2100      	movs	r1, #0
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <main+0x48>)
 800111a:	f7ff f817 	bl	800014c <SCH_Add_Task>
//  SCH_Add_Task(updateMode, 0, 50);

  SCH_Add_Task(fsm_automatic, 0, 1000);
 800111e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001122:	2100      	movs	r1, #0
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <main+0x4c>)
 8001126:	f7ff f811 	bl	800014c <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 800112a:	f7ff f8cf 	bl	80002cc <SCH_Dispatch_Tasks>
 800112e:	e7fc      	b.n	800112a <main+0x3a>
 8001130:	200003d0 	.word	0x200003d0
 8001134:	08000ee1 	.word	0x08000ee1
 8001138:	08000705 	.word	0x08000705
 800113c:	08000c31 	.word	0x08000c31

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b090      	sub	sp, #64	; 0x40
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	2228      	movs	r2, #40	; 0x28
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fc9c 	bl	8002a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001166:	2301      	movs	r3, #1
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116a:	2310      	movs	r3, #16
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fcac 	bl	8001ad4 <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001182:	f000 f8d3 	bl	800132c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 ff18 	bl	8001fd4 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011aa:	f000 f8bf 	bl	800132c <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3740      	adds	r7, #64	; 0x40
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_TIM2_Init+0x94>)
 80011d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_TIM2_Init+0x94>)
 80011de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_TIM2_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_TIM2_Init+0x94>)
 80011ec:	2209      	movs	r2, #9
 80011ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_TIM2_Init+0x94>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_TIM2_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_TIM2_Init+0x94>)
 80011fe:	f001 f845 	bl	800228c <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001208:	f000 f890 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_TIM2_Init+0x94>)
 800121a:	f001 f9c3 	bl	80025a4 <HAL_TIM_ConfigClockSource>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001224:	f000 f882 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_TIM2_Init+0x94>)
 8001236:	f001 fb9b 	bl	8002970 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 f874 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200003d0 	.word	0x200003d0

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <MX_GPIO_Init+0xb8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <MX_GPIO_Init+0xb8>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <MX_GPIO_Init+0xb8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <MX_GPIO_Init+0xb8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a21      	ldr	r2, [pc, #132]	; (8001308 <MX_GPIO_Init+0xb8>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_GPIO_Init+0xb8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|Y1_Pin|G1_Pin|EN0_Pin
 8001294:	2200      	movs	r2, #0
 8001296:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800129a:	481c      	ldr	r0, [pc, #112]	; (800130c <MX_GPIO_Init+0xbc>)
 800129c:	f000 fc01 	bl	8001aa2 <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|MODE_Pin
                          |R2_Pin|Y2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80012a0:	2200      	movs	r2, #0
 80012a2:	217f      	movs	r1, #127	; 0x7f
 80012a4:	481a      	ldr	r0, [pc, #104]	; (8001310 <MX_GPIO_Init+0xc0>)
 80012a6:	f000 fbfc 	bl	8001aa2 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R1_Pin Y1_Pin G1_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin MODE_Pin
                           R2_Pin Y2_Pin G2_Pin */
  GPIO_InitStruct.Pin = R1_Pin|Y1_Pin|G1_Pin|EN0_Pin
 80012aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012ae:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|MODE_Pin
                          |R2_Pin|Y2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2302      	movs	r3, #2
 80012ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4619      	mov	r1, r3
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <MX_GPIO_Init+0xbc>)
 80012c4:	f000 fa5c 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80012c8:	237f      	movs	r3, #127	; 0x7f
 80012ca:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2302      	movs	r3, #2
 80012d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_GPIO_Init+0xc0>)
 80012e0:	f000 fa4e 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button3_Pin Button2_Pin Button1_Pin */
  GPIO_InitStruct.Pin = Button3_Pin|Button2_Pin|Button1_Pin;
 80012e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_GPIO_Init+0xc0>)
 80012fa:	f000 fa41 	bl	8001780 <HAL_GPIO_Init>

}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00

08001314 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
//	timer_run();
	button_reading();
 800131c:	f7ff f8c4 	bl	80004a8 <button_reading>
	SCH_Update();
 8001320:	f7fe ff74 	bl	800020c <SCH_Update>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_MspInit+0x5c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <HAL_MspInit+0x5c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6193      	str	r3, [r2, #24]
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_MspInit+0x5c>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_MspInit+0x5c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_MspInit+0x5c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_MspInit+0x5c>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_MspInit+0x60>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_MspInit+0x60>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000

0800139c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ac:	d113      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_TIM_Base_MspInit+0x44>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_TIM_Base_MspInit+0x44>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_TIM_Base_MspInit+0x44>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	201c      	movs	r0, #28
 80013cc:	f000 f9a1 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d0:	201c      	movs	r0, #28
 80013d2:	f000 f9ba 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f000 f87f 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <TIM2_IRQHandler+0x10>)
 800143a:	f000 ffc3 	bl	80023c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200003d0 	.word	0x200003d0

08001448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff fff8 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480b      	ldr	r0, [pc, #44]	; (8001488 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800145a:	490c      	ldr	r1, [pc, #48]	; (800148c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <LoopFillZerobss+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001470:	4c09      	ldr	r4, [pc, #36]	; (8001498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f001 fae1 	bl	8002a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001482:	f7ff fe35 	bl	80010f0 <main>
  bx lr
 8001486:	4770      	bx	lr
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001490:	08002ae0 	.word	0x08002ae0
  ldr r2, =_sbss
 8001494:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001498:	2000041c 	.word	0x2000041c

0800149c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC1_2_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x28>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f923 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff ff3c 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f93b 	bl	8001766 <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f903 	bl	8001712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000064 	.word	0x20000064
 8001524:	2000006c 	.word	0x2000006c
 8001528:	20000068 	.word	0x20000068

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_IncTick+0x20>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	2000006c 	.word	0x2000006c
 800154c:	20000418 	.word	0x20000418

08001550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_GetTick+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000418 	.word	0x20000418

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4906      	ldr	r1, [pc, #24]	; (80015fc <__NVIC_EnableIRQ+0x34>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff90 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff2d 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff42 	bl	80015ac <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff90 	bl	8001654 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5f 	bl	8001600 <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff35 	bl	80015c8 <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffa2 	bl	80016b8 <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b08b      	sub	sp, #44	; 0x2c
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	e148      	b.n	8001a26 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001794:	2201      	movs	r2, #1
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f040 8137 	bne.w	8001a20 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4aa3      	ldr	r2, [pc, #652]	; (8001a44 <HAL_GPIO_Init+0x2c4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d05e      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017bc:	4aa1      	ldr	r2, [pc, #644]	; (8001a44 <HAL_GPIO_Init+0x2c4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d875      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017c2:	4aa1      	ldr	r2, [pc, #644]	; (8001a48 <HAL_GPIO_Init+0x2c8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d058      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017c8:	4a9f      	ldr	r2, [pc, #636]	; (8001a48 <HAL_GPIO_Init+0x2c8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d86f      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017ce:	4a9f      	ldr	r2, [pc, #636]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d052      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017d4:	4a9d      	ldr	r2, [pc, #628]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d869      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017da:	4a9d      	ldr	r2, [pc, #628]	; (8001a50 <HAL_GPIO_Init+0x2d0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d04c      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017e0:	4a9b      	ldr	r2, [pc, #620]	; (8001a50 <HAL_GPIO_Init+0x2d0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d863      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017e6:	4a9b      	ldr	r2, [pc, #620]	; (8001a54 <HAL_GPIO_Init+0x2d4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d046      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017ec:	4a99      	ldr	r2, [pc, #612]	; (8001a54 <HAL_GPIO_Init+0x2d4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d85d      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d82a      	bhi.n	800184c <HAL_GPIO_Init+0xcc>
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d859      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <HAL_GPIO_Init+0x80>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	0800187b 	.word	0x0800187b
 8001804:	08001855 	.word	0x08001855
 8001808:	08001867 	.word	0x08001867
 800180c:	080018a9 	.word	0x080018a9
 8001810:	080018af 	.word	0x080018af
 8001814:	080018af 	.word	0x080018af
 8001818:	080018af 	.word	0x080018af
 800181c:	080018af 	.word	0x080018af
 8001820:	080018af 	.word	0x080018af
 8001824:	080018af 	.word	0x080018af
 8001828:	080018af 	.word	0x080018af
 800182c:	080018af 	.word	0x080018af
 8001830:	080018af 	.word	0x080018af
 8001834:	080018af 	.word	0x080018af
 8001838:	080018af 	.word	0x080018af
 800183c:	080018af 	.word	0x080018af
 8001840:	080018af 	.word	0x080018af
 8001844:	0800185d 	.word	0x0800185d
 8001848:	08001871 	.word	0x08001871
 800184c:	4a82      	ldr	r2, [pc, #520]	; (8001a58 <HAL_GPIO_Init+0x2d8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001852:	e02c      	b.n	80018ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e029      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	3304      	adds	r3, #4
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e024      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	3308      	adds	r3, #8
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e01f      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	330c      	adds	r3, #12
 8001876:	623b      	str	r3, [r7, #32]
          break;
 8001878:	e01a      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001882:	2304      	movs	r3, #4
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e013      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001890:	2308      	movs	r3, #8
 8001892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	611a      	str	r2, [r3, #16]
          break;
 800189a:	e009      	b.n	80018b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800189c:	2308      	movs	r3, #8
 800189e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	615a      	str	r2, [r3, #20]
          break;
 80018a6:	e003      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          break;
 80018ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d801      	bhi.n	80018ba <HAL_GPIO_Init+0x13a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	e001      	b.n	80018be <HAL_GPIO_Init+0x13e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3304      	adds	r3, #4
 80018be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2bff      	cmp	r3, #255	; 0xff
 80018c4:	d802      	bhi.n	80018cc <HAL_GPIO_Init+0x14c>
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0x152>
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	3b08      	subs	r3, #8
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	210f      	movs	r1, #15
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	6a39      	ldr	r1, [r7, #32]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	431a      	orrs	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8090 	beq.w	8001a20 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001900:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <HAL_GPIO_Init+0x2dc>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a55      	ldr	r2, [pc, #340]	; (8001a5c <HAL_GPIO_Init+0x2dc>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_GPIO_Init+0x2dc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001918:	4a51      	ldr	r2, [pc, #324]	; (8001a60 <HAL_GPIO_Init+0x2e0>)
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <HAL_GPIO_Init+0x2e4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00d      	beq.n	8001960 <HAL_GPIO_Init+0x1e0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a48      	ldr	r2, [pc, #288]	; (8001a68 <HAL_GPIO_Init+0x2e8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d007      	beq.n	800195c <HAL_GPIO_Init+0x1dc>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a47      	ldr	r2, [pc, #284]	; (8001a6c <HAL_GPIO_Init+0x2ec>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_GPIO_Init+0x1d8>
 8001954:	2302      	movs	r3, #2
 8001956:	e004      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 8001958:	2303      	movs	r3, #3
 800195a:	e002      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 8001960:	2300      	movs	r3, #0
 8001962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001964:	f002 0203 	and.w	r2, r2, #3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4093      	lsls	r3, r2
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001972:	493b      	ldr	r1, [pc, #236]	; (8001a60 <HAL_GPIO_Init+0x2e0>)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800198c:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	4937      	ldr	r1, [pc, #220]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800199a:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4933      	ldr	r1, [pc, #204]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	492d      	ldr	r1, [pc, #180]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4929      	ldr	r1, [pc, #164]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4923      	ldr	r1, [pc, #140]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	491f      	ldr	r1, [pc, #124]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4919      	ldr	r1, [pc, #100]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4915      	ldr	r1, [pc, #84]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	3301      	adds	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f47f aeaf 	bne.w	8001794 <HAL_GPIO_Init+0x14>
  }
}
 8001a36:	bf00      	nop
 8001a38:	bf00      	nop
 8001a3a:	372c      	adds	r7, #44	; 0x2c
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	10320000 	.word	0x10320000
 8001a48:	10310000 	.word	0x10310000
 8001a4c:	10220000 	.word	0x10220000
 8001a50:	10210000 	.word	0x10210000
 8001a54:	10120000 	.word	0x10120000
 8001a58:	10110000 	.word	0x10110000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40010800 	.word	0x40010800
 8001a68:	40010c00 	.word	0x40010c00
 8001a6c:	40011000 	.word	0x40011000
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e001      	b.n	8001a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	807b      	strh	r3, [r7, #2]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab2:	787b      	ldrb	r3, [r7, #1]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab8:	887a      	ldrh	r2, [r7, #2]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001abe:	e003      	b.n	8001ac8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	041a      	lsls	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	611a      	str	r2, [r3, #16]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e26c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8087 	beq.w	8001c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af4:	4b92      	ldr	r3, [pc, #584]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d00c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b00:	4b8f      	ldr	r3, [pc, #572]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_OscConfig+0x5e>
 8001b0c:	4b8c      	ldr	r3, [pc, #560]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d10b      	bne.n	8001b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1a:	4b89      	ldr	r3, [pc, #548]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d06c      	beq.n	8001c00 <HAL_RCC_OscConfig+0x12c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d168      	bne.n	8001c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e246      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x76>
 8001b3c:	4b80      	ldr	r3, [pc, #512]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a7f      	ldr	r2, [pc, #508]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e02e      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x98>
 8001b52:	4b7b      	ldr	r3, [pc, #492]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7a      	ldr	r2, [pc, #488]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b78      	ldr	r3, [pc, #480]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a77      	ldr	r2, [pc, #476]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e01d      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0xbc>
 8001b76:	4b72      	ldr	r3, [pc, #456]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a71      	ldr	r2, [pc, #452]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6e      	ldr	r2, [pc, #440]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b90:	4b6b      	ldr	r3, [pc, #428]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a6a      	ldr	r2, [pc, #424]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a67      	ldr	r2, [pc, #412]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fcce 	bl	8001550 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fcca 	bl	8001550 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e1fa      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xe4>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fcba 	bl	8001550 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff fcb6 	bl	8001550 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1e6      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x10c>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d063      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c1a:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d11c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x18c>
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d116      	bne.n	8001c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_RCC_OscConfig+0x176>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e1ba      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4939      	ldr	r1, [pc, #228]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	e03a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fc6f 	bl	8001550 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fc6b 	bl	8001550 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e19b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4927      	ldr	r1, [pc, #156]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
 8001ca8:	e015      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fc4e 	bl	8001550 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc4a 	bl	8001550 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e17a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03a      	beq.n	8001d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d019      	beq.n	8001d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_RCC_OscConfig+0x274>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fc2e 	bl	8001550 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fc2a 	bl	8001550 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e15a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f000 fa9a 	bl	8002250 <RCC_Delay>
 8001d1c:	e01c      	b.n	8001d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_RCC_OscConfig+0x274>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff fc14 	bl	8001550 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fc10 	bl	8001550 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d908      	bls.n	8001d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e140      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	42420000 	.word	0x42420000
 8001d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b9e      	ldr	r3, [pc, #632]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e9      	bne.n	8001d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a6 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b97      	ldr	r3, [pc, #604]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10d      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b94      	ldr	r3, [pc, #592]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a93      	ldr	r2, [pc, #588]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]
 8001d82:	4b91      	ldr	r3, [pc, #580]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d92:	4b8e      	ldr	r3, [pc, #568]	; (8001fcc <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d118      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9e:	4b8b      	ldr	r3, [pc, #556]	; (8001fcc <HAL_RCC_OscConfig+0x4f8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a8a      	ldr	r2, [pc, #552]	; (8001fcc <HAL_RCC_OscConfig+0x4f8>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fbd1 	bl	8001550 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7ff fbcd 	bl	8001550 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b64      	cmp	r3, #100	; 0x64
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0fd      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <HAL_RCC_OscConfig+0x4f8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x312>
 8001dd8:	4b7b      	ldr	r3, [pc, #492]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a7a      	ldr	r2, [pc, #488]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e02d      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x334>
 8001dee:	4b76      	ldr	r3, [pc, #472]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a75      	ldr	r2, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a72      	ldr	r2, [pc, #456]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	e01c      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x356>
 8001e10:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a6c      	ldr	r2, [pc, #432]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a69      	ldr	r2, [pc, #420]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a66      	ldr	r2, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a63      	ldr	r2, [pc, #396]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fb81 	bl	8001550 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff fb7d 	bl	8001550 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0ab      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ee      	beq.n	8001e52 <HAL_RCC_OscConfig+0x37e>
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fb6b 	bl	8001550 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fb67 	bl	8001550 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e095      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b48      	ldr	r3, [pc, #288]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8081 	beq.w	8001fbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebc:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d061      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d146      	bne.n	8001f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_RCC_OscConfig+0x4fc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fb3b 	bl	8001550 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff fb37 	bl	8001550 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e067      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef0:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d108      	bne.n	8001f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f06:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	492d      	ldr	r1, [pc, #180]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a19      	ldr	r1, [r3, #32]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	4927      	ldr	r1, [pc, #156]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <HAL_RCC_OscConfig+0x4fc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff fb0b 	bl	8001550 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff fb07 	bl	8001550 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e037      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x46a>
 8001f5c:	e02f      	b.n	8001fbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_RCC_OscConfig+0x4fc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff faf4 	bl	8001550 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff faf0 	bl	8001550 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e020      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x498>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e013      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	42420060 	.word	0x42420060

08001fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0d0      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d910      	bls.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b67      	ldr	r3, [pc, #412]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4965      	ldr	r1, [pc, #404]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800203a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002052:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d040      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d115      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e073      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e06b      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4936      	ldr	r1, [pc, #216]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7ff fa44 	bl	8001550 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff fa40 	bl	8001550 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e053      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d210      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 0207 	bic.w	r2, r3, #7
 800210a:	4922      	ldr	r1, [pc, #136]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1cc>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f9a2 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
 800219c:	08002ab4 	.word	0x08002ab4
 80021a0:	20000064 	.word	0x20000064
 80021a4:	20000068 	.word	0x20000068

080021a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_GetSysClockFreq+0x94>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x30>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x36>
 80021d6:	e027      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_GetSysClockFreq+0x98>)
 80021da:	613b      	str	r3, [r7, #16]
      break;
 80021dc:	e027      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d010      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_GetSysClockFreq+0x94>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0c5b      	lsrs	r3, r3, #17
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	4a11      	ldr	r2, [pc, #68]	; (8002248 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	fb02 f203 	mul.w	r2, r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e004      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a0c      	ldr	r2, [pc, #48]	; (800224c <HAL_RCC_GetSysClockFreq+0xa4>)
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	613b      	str	r3, [r7, #16]
      break;
 8002226:	e002      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetSysClockFreq+0x98>)
 800222a:	613b      	str	r3, [r7, #16]
      break;
 800222c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222e:	693b      	ldr	r3, [r7, #16]
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	007a1200 	.word	0x007a1200
 8002244:	08002ac4 	.word	0x08002ac4
 8002248:	08002ad4 	.word	0x08002ad4
 800224c:	003d0900 	.word	0x003d0900

08002250 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <RCC_Delay+0x34>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <RCC_Delay+0x38>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0a5b      	lsrs	r3, r3, #9
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800226c:	bf00      	nop
  }
  while (Delay --);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	60fa      	str	r2, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f9      	bne.n	800226c <RCC_Delay+0x1c>
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	20000064 	.word	0x20000064
 8002288:	10624dd3 	.word	0x10624dd3

0800228c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e041      	b.n	8002322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff f872 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f000 fa56 	bl	800277c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d001      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e035      	b.n	80023b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a16      	ldr	r2, [pc, #88]	; (80023bc <HAL_TIM_Base_Start_IT+0x90>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_TIM_Base_Start_IT+0x4e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236e:	d004      	beq.n	800237a <HAL_TIM_Base_Start_IT+0x4e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <HAL_TIM_Base_Start_IT+0x94>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d111      	bne.n	800239e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b06      	cmp	r3, #6
 800238a:	d010      	beq.n	80023ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239c:	e007      	b.n	80023ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40012c00 	.word	0x40012c00
 80023c0:	40000400 	.word	0x40000400

080023c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d020      	beq.n	8002428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01b      	beq.n	8002428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0202 	mvn.w	r2, #2
 80023f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f998 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f98b 	bl	8002732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f99a 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d020      	beq.n	8002474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01b      	beq.n	8002474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0204 	mvn.w	r2, #4
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f972 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f965 	bl	8002732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f974 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d020      	beq.n	80024c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01b      	beq.n	80024c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0208 	mvn.w	r2, #8
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f94c 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f93f 	bl	8002732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f94e 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d020      	beq.n	800250c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01b      	beq.n	800250c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0210 	mvn.w	r2, #16
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2208      	movs	r2, #8
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f926 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f919 	bl	8002732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f928 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00c      	beq.n	8002530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0201 	mvn.w	r2, #1
 8002528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fef2 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa6f 	bl	8002a32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8f8 	bl	8002768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0220 	mvn.w	r2, #32
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa42 	bl	8002a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_TIM_ConfigClockSource+0x1c>
 80025bc:	2302      	movs	r3, #2
 80025be:	e0b4      	b.n	800272a <HAL_TIM_ConfigClockSource+0x186>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f8:	d03e      	beq.n	8002678 <HAL_TIM_ConfigClockSource+0xd4>
 80025fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fe:	f200 8087 	bhi.w	8002710 <HAL_TIM_ConfigClockSource+0x16c>
 8002602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002606:	f000 8086 	beq.w	8002716 <HAL_TIM_ConfigClockSource+0x172>
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260e:	d87f      	bhi.n	8002710 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b70      	cmp	r3, #112	; 0x70
 8002612:	d01a      	beq.n	800264a <HAL_TIM_ConfigClockSource+0xa6>
 8002614:	2b70      	cmp	r3, #112	; 0x70
 8002616:	d87b      	bhi.n	8002710 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b60      	cmp	r3, #96	; 0x60
 800261a:	d050      	beq.n	80026be <HAL_TIM_ConfigClockSource+0x11a>
 800261c:	2b60      	cmp	r3, #96	; 0x60
 800261e:	d877      	bhi.n	8002710 <HAL_TIM_ConfigClockSource+0x16c>
 8002620:	2b50      	cmp	r3, #80	; 0x50
 8002622:	d03c      	beq.n	800269e <HAL_TIM_ConfigClockSource+0xfa>
 8002624:	2b50      	cmp	r3, #80	; 0x50
 8002626:	d873      	bhi.n	8002710 <HAL_TIM_ConfigClockSource+0x16c>
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	d058      	beq.n	80026de <HAL_TIM_ConfigClockSource+0x13a>
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d86f      	bhi.n	8002710 <HAL_TIM_ConfigClockSource+0x16c>
 8002630:	2b30      	cmp	r3, #48	; 0x30
 8002632:	d064      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x15a>
 8002634:	2b30      	cmp	r3, #48	; 0x30
 8002636:	d86b      	bhi.n	8002710 <HAL_TIM_ConfigClockSource+0x16c>
 8002638:	2b20      	cmp	r3, #32
 800263a:	d060      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x15a>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d867      	bhi.n	8002710 <HAL_TIM_ConfigClockSource+0x16c>
 8002640:	2b00      	cmp	r3, #0
 8002642:	d05c      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x15a>
 8002644:	2b10      	cmp	r3, #16
 8002646:	d05a      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x15a>
 8002648:	e062      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f000 f96a 	bl	8002932 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800266c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	609a      	str	r2, [r3, #8]
      break;
 8002676:	e04f      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6899      	ldr	r1, [r3, #8]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f000 f953 	bl	8002932 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269a:	609a      	str	r2, [r3, #8]
      break;
 800269c:	e03c      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f000 f8ca 	bl	8002844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2150      	movs	r1, #80	; 0x50
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f921 	bl	80028fe <TIM_ITRx_SetConfig>
      break;
 80026bc:	e02c      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f000 f8e8 	bl	80028a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2160      	movs	r1, #96	; 0x60
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f911 	bl	80028fe <TIM_ITRx_SetConfig>
      break;
 80026dc:	e01c      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 f8aa 	bl	8002844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f901 	bl	80028fe <TIM_ITRx_SetConfig>
      break;
 80026fc:	e00c      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f000 f8f8 	bl	80028fe <TIM_ITRx_SetConfig>
      break;
 800270e:	e003      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      break;
 8002714:	e000      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
	...

0800277c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a2b      	ldr	r2, [pc, #172]	; (800283c <TIM_Base_SetConfig+0xc0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <TIM_Base_SetConfig+0x28>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0x28>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a28      	ldr	r2, [pc, #160]	; (8002840 <TIM_Base_SetConfig+0xc4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a20      	ldr	r2, [pc, #128]	; (800283c <TIM_Base_SetConfig+0xc0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <TIM_Base_SetConfig+0x52>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d003      	beq.n	80027ce <TIM_Base_SetConfig+0x52>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <TIM_Base_SetConfig+0xc4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d108      	bne.n	80027e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a0d      	ldr	r2, [pc, #52]	; (800283c <TIM_Base_SetConfig+0xc0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d103      	bne.n	8002814 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f023 0201 	bic.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]
  }
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40000400 	.word	0x40000400

08002844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0201 	bic.w	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800286e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f023 030a 	bic.w	r3, r3, #10
 8002880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	621a      	str	r2, [r3, #32]
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f023 0210 	bic.w	r2, r3, #16
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	031b      	lsls	r3, r3, #12
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	621a      	str	r2, [r3, #32]
}
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	f043 0307 	orr.w	r3, r3, #7
 8002920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002932:	b480      	push	{r7}
 8002934:	b087      	sub	sp, #28
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800294c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	021a      	lsls	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	431a      	orrs	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4313      	orrs	r3, r2
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	609a      	str	r2, [r3, #8]
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002984:	2302      	movs	r3, #2
 8002986:	e041      	b.n	8002a0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d4:	d004      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a10      	ldr	r2, [pc, #64]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10c      	bne.n	80029fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400

08002a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <__libc_init_array>:
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	2600      	movs	r6, #0
 8002a48:	4d0c      	ldr	r5, [pc, #48]	; (8002a7c <__libc_init_array+0x38>)
 8002a4a:	4c0d      	ldr	r4, [pc, #52]	; (8002a80 <__libc_init_array+0x3c>)
 8002a4c:	1b64      	subs	r4, r4, r5
 8002a4e:	10a4      	asrs	r4, r4, #2
 8002a50:	42a6      	cmp	r6, r4
 8002a52:	d109      	bne.n	8002a68 <__libc_init_array+0x24>
 8002a54:	f000 f822 	bl	8002a9c <_init>
 8002a58:	2600      	movs	r6, #0
 8002a5a:	4d0a      	ldr	r5, [pc, #40]	; (8002a84 <__libc_init_array+0x40>)
 8002a5c:	4c0a      	ldr	r4, [pc, #40]	; (8002a88 <__libc_init_array+0x44>)
 8002a5e:	1b64      	subs	r4, r4, r5
 8002a60:	10a4      	asrs	r4, r4, #2
 8002a62:	42a6      	cmp	r6, r4
 8002a64:	d105      	bne.n	8002a72 <__libc_init_array+0x2e>
 8002a66:	bd70      	pop	{r4, r5, r6, pc}
 8002a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6c:	4798      	blx	r3
 8002a6e:	3601      	adds	r6, #1
 8002a70:	e7ee      	b.n	8002a50 <__libc_init_array+0xc>
 8002a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a76:	4798      	blx	r3
 8002a78:	3601      	adds	r6, #1
 8002a7a:	e7f2      	b.n	8002a62 <__libc_init_array+0x1e>
 8002a7c:	08002ad8 	.word	0x08002ad8
 8002a80:	08002ad8 	.word	0x08002ad8
 8002a84:	08002ad8 	.word	0x08002ad8
 8002a88:	08002adc 	.word	0x08002adc

08002a8c <memset>:
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4402      	add	r2, r0
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d100      	bne.n	8002a96 <memset+0xa>
 8002a94:	4770      	bx	lr
 8002a96:	f803 1b01 	strb.w	r1, [r3], #1
 8002a9a:	e7f9      	b.n	8002a90 <memset+0x4>

08002a9c <_init>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr

08002aa8 <_fini>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr
